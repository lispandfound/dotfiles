#+TITLE: Emacs Init
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* Package Manager
- If you get a complaint that the install version [[elisp:(elpaca-browse 'elpaca)][see the github]] for the updated version.
#+begin_src emacs-lisp 
  (defvar elpaca-installer-version 0.3)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (kill-buffer buffer)
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src
* Setup.el
A lightweight alternative to use-package that is supposedly "less magic".
- Link :: [[https://www.emacswiki.org/emacs/SetupEl][Emacs Wiki]]
#+begin_src emacs-lisp
  (elpaca setup
    (require 'setup)
    (defmacro defsetup (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
  c  the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (defsetup :keys (key command)
              :repeatable t
              :after-loaded t
              :ensure (nil func)
              `(bind-key ,key ,command ,(setup-get 'map)))
    (defsetup :gkeys (key command)
              :repeatable t
              :ensure (nil func)
              `(bind-key ,key ,command))
    (defsetup :gkeys* (key command)
              :repeatable t
              :ensure (nil func)
              `(bind-key* ,key ,command))

    (setup-define :load-after
      (lambda (&rest features)
        (let ((body `(require ',(setup-get 'feature))))
          (dolist (feature (nreverse features))
            (setq body `(with-eval-after-load ',feature ,body)))
          body))
      :documentation "Load the current feature after FEATURES.")

    (setup-define :autoload
      (lambda (func)
        (let ((fn (if (memq (car-safe func) '(quote function))
                      (cadr func)
                    func)))
          `(unless (fboundp (quote ,fn))
             (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
      :documentation "Autoload COMMAND if not already bound."
      :repeatable t
      :signature '(FUNC ...))
    (setup-define :advise
      (lambda (symbol where function)
        `(advice-add ',symbol ,where ,function))
      :documentation "Add a piece of advice on a function.
  See `advice-add' for more details."
      :after-loaded t
      :debug '(sexp sexp function-form)
      :ensure '(nil nil func)
      :repeatable t))

  (elpaca-wait)
  (defmacro elpaca-setup (order &rest body)
    `(elpaca ,order (setup ,(if (consp order) (car order) order) ,@body)))
#+end_src
* Custom
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
  (customize-set-value 'custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src
* Exec Path
#+begin_src emacs-lisp
  (elpaca-setup exec-path-from-shell
    (exec-path-from-shell-initialize))
#+end_src
* Bind Key
#+begin_src emacs-lisp
  (elpaca-setup bind-key)
#+end_src
* Theme
#+begin_src emacs-lisp
  (elpaca-setup modus-themes
                (load-theme 'modus-operandi t))
#+end_src
* Window Decorations and Visual Niceties
Disable all the window decorations. This needs to be early to reduce startup flickering.
#+begin_src emacs-lisp
  (setq frame-inhibit-implied-resize t
        visible-bell nil)
  (unless (memq window-system '(mac ns))
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+end_src

Turn off the bell, disable  
* Backups and Lockfiles
Move all backups to a central directory. Set sensible limits on the number of versions kept.
#+begin_src emacs-lisp
  (setq
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   backup-by-copying t
   backup-directory-alist '(("." . "~/.emacs.d/saves")))
  (save-place-mode 1)
  (savehist-mode 1)
#+end_src
* Native Compilation
Disable the native compilation warnings so that the buffer doesn't interrupt whilst working.
#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+end_src
* Authentication
Cache passwords, and setup gpg for emacs. The pinentry mode ensures emacs prompts for password imports. The cache and expiry allow emacs to save the password between invocations.
#+begin_src emacs-lisp
  (setq password-cache t
        password-cache-expiry 3600
        epg-gpg-program "gpg"
        epg-pinentry-mode 'loopback
        auth-sources '("~/.authinfo.gpg"))
#+end_src
* Scratch Buffer
#+begin_src emacs-lisp
  (setq
   initial-major-mode 'text-mode
   inhibit-splash-screen t)
#+end_src
* General Bindings
The =H-s-*= keybindings are for my laptop.. 
#+begin_src emacs-lisp
  (setup
   (autoload 'zap-up-to-char "misc"
     "Kill up to, but not including ARGth occurrence of CHAR." t)
   (:global
    "M-/" 'hippie-expand
    "M-z" 'zap-up-to-char
    "s-t" 'eshell
    "H-s-t" 'eshell
    "M-o" 'other-window
    "M-g c" 'compile
    "C-z" 'repeat
    "M-g r" 'recompile
    "C-s" 'isearch-forward-regexp
    "C-r" 'isearch-backward-regexp
    "C-z" 'repeat
    "C-M-s" 'isearch-forward
    "C-M-r" 'isearch-backward)
   (repeat-mode))
#+end_src
Dvorak makes x a hard key to press, so we rebind to t. The translation is done once with a hook and once directly because in emacsclient the translations will not apply to new frames.
#+begin_src emacs-lisp
  (defun dvorak-translation ()
    (keyboard-translate ?\C-t ?\C-x)
    (keyboard-translate ?\C-x ?\C-t))
  (defun setup-frame-keyboard (&optional frame)
    "Re-map keys in the current terminal."
    (with-selected-frame (or frame (selected-frame))
      (dvorak-translation)))
  (dvorak-translation)
  (add-hook 'after-make-frame-functions #'setup-frame-keyboard)
#+end_src
#+begin_src emacs-lisp
  (elpaca-setup which-key
                (which-key-mode))
#+end_src

* Window and Buffer Management
#+begin_src emacs-lisp
  (setup winner
   (:global
    "s-/" 'winner-undo
    "H-s-/" 'winner-undo
    "s-?" 'winner-redo
    "H-s-?" 'winner-redo)
   (winner-mode))
#+end_src
#+begin_src emacs-lisp
  (setup uniquify
         (setq uniquify-buffer-name-style 'forward))
#+end_src
** Popper
#+begin_src emacs-lisp
  (elpaca-setup popper
                (:bind
                 "C-`"   popper-toggle-latest
                 "M-`"   popper-cycle
                 "C-M-`" popper-toggle-type)

                (:option
                 popper-reference-buffers
                 '("\\*Messages\\*"
                   "\\*helpful .*\\*$"
                   "\\*Warnings\\*"
                   "Output\\*$"
                   "\\*Async Shell Command\\*"
                   "^\\*eshell.*\\*\\(<[0-9]+>\\)?$" eshell-mode ;eshell as a popup
                   "^\\*shell.*\\*\\(<[0-9]+>\\)?$"  shell-mode  ;shell as a popup
                   "^\\*term.*\\*\\(<[0-9]+>\\)?$"   term-mode   ;term as a popup
                   help-mode
                   helpful-mode
                   compilation-mode))

                (popper-mode +1)
                (popper-echo-mode +1))
#+end_src

* Jumping
#+begin_src emacs-lisp
  (elpaca-setup beacon
                (beacon-mode 1))


#+end_src
* Editing
** General
=y-or-n-p= is not an editing feature per se, but it's the only place it made sense to change it
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil
        require-final-newline t)
  (global-auto-revert-mode 1)
  (add-hook 'after-init-hook #'global-display-line-numbers-mode)
  (defun disable-line-numbers ()
    (display-line-numbers-mode -1))
  (setq-default indent-tabs-mode nil) ;; Disable tabs
  (electric-pair-mode)
  (electric-indent-mode)
  (global-visual-line-mode)
  (global-hl-line-mode)

  (defun edit-as-root ()
    "Edit the current file as root."
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when (not (file-writable-p file-name))
        (setq file-name (concat "/sudo:root@localhost:" file-name)))
      (find-file file-name)))
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src 
** Search
#+begin_src emacs-lisp
  (setq isearch-lazy-count t)
#+end_src
** Spelling
#+begin_src emacs-lisp
  (setq ispell-program-name "hunspell"
        dictionary-server "localhost")
#+end_src
#+begin_src emacs-lisp
  (elpaca-setup (jinx :type git :host github :repo "minad/jinx" :files (:defaults "jinx-mod.c" "emacs-module.h"))
    (with-eval-after-load 'embark
      (define-key embark-prose-map (kbd ".") 'jinx-correct))
    (:with-hook emacs-startup-hook
      (:hook global-jinx-mode)))

#+end_src 
** Formatting
#+begin_src emacs-lisp
  (elpaca apheleia
    (apheleia-global-mode 1))
#+end_src
** Rectangle Mark Mode
#+begin_src emacs-lisp
  (setup rectangle-mark
    (transient-define-prefix rectangle-commands ()
    "Transient state for rectangle mark mode."
    [:class transient-columns
     ["Cut/Kill/Delete"
      ("<backspace>" "Delete rectangle" delete-rectangle)
      ("k" "Kill rectangle" kill-rectangle)
      ]
     ["Replace"
      ("c" "Replace with whitespace" clear-rectangle)
      ("s" "Replace rectangle with string" string-rectangle)]
     ["Insert"
      ("<tab>" "Shift text to the right" open-rectangle)
      ("i" "Insert string at the start of rectangle" string-insert-rectangle)
      ("n" "Insert numbers at the start of the rectangle" my/rectangle-number-lines)
      ]
     ["Copy/Yank"
      ("w" "Copy rectangle" copy-rectangle-as-kill)
      ("r" "Copy rectangle to register" copy-rectangle-to-register)
      ("y" "Yank rectangle" yank-rectangle)]
     ["Calc"
      ("M" "Send rectangle as matrix to calc" calc-grab-rectangle)
      ("D" "Sum a rectangle down" calc-grab-sum-down)
      ("A" "Sum a rectangle across" calc-grab-sum-across)]

     ["Cycle"
      ("x" "Cycle point around the rectangle's corners" rectangle-exchange-point-and-mark :transient t)]
     ])
    (:bind "SPC" 'rectangle-commands))
#+end_src
** LanguageTool
This parses the compile output of languagetool for compile 
#+begin_src emacs-lisp
  (add-hook 'compilation-mode-hook (lambda ()
                                     (add-to-list 'compilation-error-regexp-alist-alist '(languagetool "Line \\([0-9]+\\), column \\([0-9]+\\)" nil 1 2))
                                     (add-to-list 'compilation-error-regexp-alist-alist '(languagetool-file "^Working on \\(.*?\\)\\.\\.\\.$" 1))
                                     (add-to-list 'compilation-error-regexp-alist 'languagetool)
                                     (add-to-list 'compilation-error-regexp-alist 'languagetool-file)))
#+end_src
** Tree-Sitter
#+begin_src emacs-lisp
  (setup treesit
    (:option
     treesit-font-lock-level 4))

  (elpaca-setup (treesit-auto :type git :host github :repo "renzmann/treesit-auto")
                (:option
                 treesit-auto-install 'prompt)
                (:autoload global-treesit-auto-mode treesit-auto-mode)

                (:hook-into prog-mode))
#+end_src
** Syntax Checking
#+begin_src emacs-lisp
  (setup flymake
    (:option flymake-no-changes-timeout 3))
#+end_src
** eglot
#+begin_src emacs-lisp
  (elpaca-setup eglot
    (dolist (mode '(python-mode-hook haskell-mode-hook latex-mode-hook))
      (add-hook mode #'eglot-ensure))

    (:option
     eglot-autoshutdown t
     eglot-events-buffer-size 256
     eglot-ignored-server-capabilites '(:documentHighlightProvider)))
#+end_src
** Latex
#+begin_src emacs-lisp
  (elpaca-setup auctex
                (:option TeX-auto-save t
                         TeX-parse-self t
                         TeX-electric-math (cons "\\(" "\\)")
                         LaTeX-electric-left-right-brace t
                         TeX-electric-sub-and-superscript t
                         TeX-command-extra-options "-shell-escape"
                         TeX-master nil
                         TeX-engine 'xetex)
                (defun jake/theorem-environments ()
                  (LaTeX-add-environments '("theorem"  LaTeX-env-label)
                                          '("lemma" LaTeX-env-label)
                                          '("definition" LaTeX-env-label)
                                          '("corollary" LaTeX-env-label))
                  (setf LaTeX-label-alist (cl-list* '("lemma" . "lem:") '("theorem" . "thm:") '("definition" . "def:") '("corollary" . "cor:") LaTeX-label-alist)))
                (:with-feature latex
                  (:hook turn-on-auto-fill LaTeX-math-mode jake/theorem-environments))
                (add-hook 'TeX-after-compilation-finished-functions-hook 'TeX-revert-document-buffer))
#+end_src

#+begin_src emacs-lisp
  (elpaca-setup cdlatex
    (:autoload org-cdlatex-mode)
    (:with-feature org
      (:hook org-cdlatex-mode))

    (defun add-labelled-env (environment shortcut)
            (add-to-list 'cdlatex-env-alist (list environment (format "\\begin{%s}\nAUTOLABEL\n?\n\\end{%s}" environment environment) nil))
            (add-to-list 'cdlatex-command-alist (list shortcut (format "Insert %s env" environment) "" 'cdlatex-environment (list environment) t nil)))
    (defun jake/cdlatex-hook ()

      (cdlatex-mode)
      ;; Fixing #35 on github, cdlatex-takeover-parenthesis doesn't work...
      (unbind-key "(" cdlatex-mode-map)
      (unbind-key "{" cdlatex-mode-map)
      (unbind-key "[" cdlatex-mode-map))
    (:with-feature latex
      (:hook 'jake/cdlatex-hook))
    (:when-loaded
      (dolist (kv '(("theorem" "thm") ("definition" "def") ("corollary" "cor") ("lemma" "lem")))
      (add-labelled-env (car kv) (cadr kv)))))
#+end_src

#+begin_src emacs-lisp
  (setup reftex
    (:hook-into latex-mode))
#+end_src
** Tempo
#+begin_src emacs-lisp
  (setup tempo
   (:option tempo-interactive t)
   (:global
    "M-g M-e" tempo-forward-mark
    "M-g M-a" tempo-backward-mark)
   (defun load-tempo-file ()
     )
   (defun skip-self-insert ()
     (put (intern (concat "tempo-template-" (ad-get-arg 0))) 'no-self-insert t))
   (:advise tempo-define-template :after skip-self-insert)
   (:when-loaded
     (load (concat user-emacs-directory "tempo.el"))))
#+end_src
** Haskell
#+begin_src emacs-lisp
  (elpaca-setup haskell-mode
     (:hook interactive-haskell-mode))
#+end_src
* Git
#+begin_src emacs-lisp
  (elpaca-setup magit
                (:bind "C-x g" magit-status))
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (elpaca-setup org-contrib
                (:option
                 org-latex-pdf-process '("latexmk -f -pdf -shell-escape -%latex -interaction=nonstopmode -output-directory=%o %f")
                 org-latex-compiler "lualatex"
                 org-export-with-smart-quotes t
                 org-latex-listings 'minted
                 org-stuck-projects '("+@project/-DONE" ("NEXT") nil "SCHEDULED:")
                 org-use-speed-commands t
                 org-highlight-latex-and-related '(script entities)
                 org-agenda-files '("~/Sync/bibliography/bibliography.org" "~/Sync/todo.org" "~/Sync/notes.org")
                 org-refile-targets '((nil . (:maxlevel . 2)) ("~/Sync/archive.org" . (:level . 1)))
                 org-directory "~/Sync/"
                 org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "KILL(k)") (sequence "[ ](T)" "[?](W)" "[P](P)" "|" "[X](D)" "[-](K)" ))
                 org-pretty-entities t
                 org-hide-emphasis-markers t
                 org-superstar-headline-bullets-list '(" ")
                 org-attach-id-dir ".attach"
                 org-ellipsis "  "
                 org-agenda-block-separator ""
                 +org-capture-todo-file "~/Sync/todo.org"
                 +org-capture-notes-file "~/Sync/notes.org"
                 org-bibtex-file "~/Sync/bibliography/bibliography.org"
                 org-capture-templates '(("t" "Personal todo" entry
                                          (file+headline +org-capture-todo-file "Inbox")
                                          "* TODO %?\n%i\n" :prepend t)
                                         ("p" "Paper" entry
                                          (file+headline +org-capture-todo-file "Inbox")
                                          "* TODO Read %? :paper:\n" :prepend t)
                                         ("b" "Bibliography entry" entry
                                          (file org-bibtex-file)
                                          (function org-bibtex/capture-bibtex))
                                         ("n" "Personal notes" entry
                                          (file +org-capture-notes-file)
                                          "* %u %?\n%i\n" :prepend t))


                 org-publish-project-alist
                 '(("website"
                    :base-directory "~/src/personal-website/"
                    :publishing-directory "/ssh:server@jakefaulkner.me:/home/server/org/"
                    :publishing-function org-html-publish-to-html)))
                (:global
                 "C-c a" org-agenda
                 "C-c n" org-capture)
                (:with-hook org-capture-after-finalize-hook
                  (:hook org-save-all-org-buffers))
                (:with-hook org-agenda-finalize-hook
                  (:hook org-save-all-org-buffers))
                (:when-loaded
                  (add-to-list 'org-latex-packages-alist '("" minted))
                  (add-to-list 'org-modules 'org-tempo)))

  (setup ox-beamer
    (:load-after org-mode)
    (:when-loaded (org-babel-do-load-languages 'org-babel-load-languages '((haskell . t)))))

  (elpaca-setup org-appear
                (:option
                 org-appear-inside-latex t
                 org-appear-autosubmarkers t)
                (:hook-into org-mode))
#+end_src

* Completions
** Vertico and Orderless
#+begin_src emacs-lisp
  (elpaca-setup vertico
                (vertico-mode)
                (:global "M-R" 'vertico-repeat)
                (:with-map vertico-map
                  (:bind "RET" vertico-directory-enter
                         "DEL" vertico-directory-delete-char
                         "M-DEL" vertico-directory-delete-char))
                (:with-hook minibuffer-setup-hook
                  (:hook vertico-repeat-save))
                (:with-hook rfn-eshadow-update-overlay-hook (:hook vertico-directory-tidy)))
  (elpaca-setup orderless
                (:option
                 completion-cycle-threshold 3
                 completion-styles '(orderless basic)
                 completion-category-defaults nil
                 completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Marginalia
#+begin_src emacs-lisp
  (elpaca-setup marginalia
                (marginalia-mode))
#+end_src
** Embark
#+begin_src emacs-lisp
  (elpaca-setup embark
                (:global "C-." embark-act
                         "C-," embark-dwim
                         "C-h B" embark-bindings)
                (:option prefix-help-command #'embark-prefix-help-command
                         (prepend display-buffer-alist) '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                                                          nil
                                                          (window-parameters (mode-line-format . none)))
                         eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

                (:with-hook eldoc-documentation-functions
                  (:hook embark-eldoc-first-target)))
#+end_src
** Consult
#+begin_src emacs-lisp
  (elpaca-setup consult
                ;; Replace bindings. Lazily loaded due by `use-package'.
                (:global ;; C-c bindings (mode-specific-map)
                 "C-c M-x"  consult-mode-command
                 "C-c h"  consult-history
                 "C-c k"  consult-kmacro
                 "C-c m"  consult-man
                 "C-c i"  consult-info
                 [remap Info-search]  consult-info
                 ;; C-x bindings (ctl-x-map)
                 "C-x M-:" consult-complex-command     ;; orig. repeat-complex-command
                 "C-x b" consult-buffer                ;; orig. switch-to-buffer
                 "C-x 4 b" consult-buffer-other-window ;; orig. switch-to-buffer-other-window
                 "C-x 5 b" consult-buffer-other-frame  ;; orig. switch-to-buffer-other-frame
                 "C-x r b" consult-bookmark            ;; orig. bookmark-jump
                 "C-x p b" consult-project-buffer      ;; orig. project-switch-to-buffer
                 ;; Custom M-# bindings for fast register access
                 "M-#" consult-register-load
                 "M-'" consult-register-store          ;; orig. abbrev-prefix-mark (unrelated)
                 "C-M-#" consult-register
                 ;; Other custom bindings
                 "M-y" consult-yank-pop                ;; orig. yank-pop
                 ;; M-g bindings (goto-map)
                 "M-g e" consult-compile-error
                 "M-g f" consult-flymake               ;; Alternative: consult-flycheck
                 "M-g g" consult-goto-line             ;; orig. goto-line
                 "M-g M-g" consult-goto-line           ;; orig. goto-line
                 "M-g o" consult-outline               ;; Alternative: consult-org-heading
                 "M-g m" consult-mark
                 "M-g k" consult-global-mark
                 "M-g i" consult-imenu
                 "M-g I" consult-imenu-multi
                 ;; M-s bindings (search-map)
                 "M-s d" consult-find
                 "M-s D" consult-locate
                 "M-s g" consult-grep
                 "M-s G" consult-git-grep
                 "M-s r" consult-ripgrep
                 "M-s l" consult-line
                 "M-s L" consult-line-multi
                 "M-s k" consult-keep-lines
                 "M-s u" consult-focus-lines
                 ;; Isearch integration
                 "M-s e" consult-isearch-history)
                (:with-map isearch-mode-map
                  (:bind
                   "M-e" consult-isearch-history         ;; orig. isearch-edit-string
                   "M-s e" consult-isearch-history       ;; orig. isearch-edit-string
                   "M-s l" consult-line                  ;; needed by consult-line to detect isearch
                   "M-s L" consult-line-multi))
                (:with-map minibuffer-local-map
                  (:bind
                   "M-s" consult-history
                   "M-r" consult-history))
                (:with-hook completion-list-mode-hook
                  (:hook consult-preview-at-point-mode))
                (:option
                 register-preview-delay 0.5
                 register-preview-function #'consult-register-format
                 xref-show-xrefs-function #'consult-xref
                 xref-show-definitions-function #'consult-xref
                 consult-narrow-key "<")
                (:advise register-preview :override consult-register-window))
  (elpaca-setup embark-consult
    (:with-feature embark-collect
      (:hook consult-preview-at-point-mode)))
#+end_src
** Corfu
#+begin_src emacs-lisp
  (elpaca-setup corfu

                (global-corfu-mode)

                ;; Add prompt indicator to `completing-read-multiple'.
                ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
                (defun crm-indicator (args)
                  (cons (format "[CRM%s] %s"
                                (replace-regexp-in-string
                                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                                 crm-separator)
                                (car args))
                        (cdr args)))
                (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

                ;; Do not allow the cursor in the minibuffer prompt
                (setq minibuffer-prompt-properties
                      '(read-only t cursor-intangible t face minibuffer-prompt))
                (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
                (setq-default abbrev-mode t)

                ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
                ;; Vertico commands are hidden in normal buffers.
                ;; (setq read-extended-command-predicate
                ;;       #'command-completion-default-include-p)

                ;; Enable recursive minibuffers
                (setq enable-recursive-minibuffers t))
#+end_src
** Cape
#+begin_src emacs-lisp
  (elpaca-setup cape
              
                (:global "M-p p" completion-at-point
                         "M-p t" complete-tag        ;; etags
                         "M-p d" cape-dabbrev        ;; or dabbrev-completion
                         "M-p h" cape-history
                         "M-p f" cape-file
                         "M-p k" cape-keyword
                         "M-p s" cape-symbol
                         "M-p a" cape-abbrev
                         "M-p i" cape-ispell
                         "M-p l" cape-line
                         "M-p w" cape-dict
                         "M-p \\" cape-tex
                         "M-p _" cape-tex 
                         "M-p ^" cape-tex
                         "M-p &" cape-sgml
                         "M-p r" cape-rfc1345)
                (defun text-completions ()
                  (add-to-list 'completion-at-point-functions #'cape-ispell))
                (:with-hook text-mode-hook
                  (:hook text-completions))
                ;; Add `completion-at-point-functions', used by `completion-at-point'.
                (add-to-list 'completion-at-point-functions #'cape-dabbrev)
                (add-to-list 'completion-at-point-functions #'cape-file))
#+end_src
* Email
#+begin_src emacs-lisp
  (use-package mu4e
 
    :load-path "/usr/share/emacs/site-lisp/mu4e"
    :commands mu4e mu4e-compose-new
    :config
    ;; set mail user agent to mu4e
    (setq mail-user-agent 'mu4e-user-agent)

    ;; set mu4e mail directory
    (setq mu4e-maildir "~/.mail")

    ;; use mu4e for sending mail
    (setq send-mail-function 'smtpmail-send-it
          message-send-mail-function 'smtpmail-send-it)

    ;; SMTP settings for sending mail
    (setq smtpmail-smtp-server "localhost"
          smtpmail-smtp-service 1025) ;; or the port number that DavMail is using

    ;; enable mu4e
    (setq mu4e-get-mail-command "mbsync -a"
          mu4e-update-interval 300 ;; update every 5 minutes
          mu4e-view-show-addresses t
          mu4e-compose-signature-auto-include nil
          mu4e-view-show-images t
          mu4e-headers-include-related nil
          mu4e-use-fancy-chars t
          mu4e-headers-date-format "%Y-%m-%d %H:%M"
          mu4e-headers-fields '((:human-date . 12)
                                (:flags . 4)
                                (:from . 22)
                                (:subject . nil))
          mu4e-headers-visible-columns 100
          mu4e-headers-skip-duplicates t
          mu4e-headers-sort-direction 'descending
          mu4e-headers-auto-update t
          mu4e-compose-dont-reply-to-self t
          mu4e-confirm-quit nil
          mu4e-compose-format-flowed t
          mu4e-compose-dont-reply-to-self t
          mu4e-view-prefer-html t)

    ;; specify the mail sources
    (setq mu4e-maildir-shortcuts
          '(("/inbox" . ?i)
            ("/sent" . ?s)
            ("/drafts" . ?d)
            ("/trash" . ?t)))

    ;; define the Exchange email account
    (setq mu4e-sent-folder "/sent"
          mu4e-drafts-folder "/drafts"
          mu4e-trash-folder "/trash"
          mu4e-refile-folder "/archive"
          mu4e-sent-messages-behavior 'delete
          mu4e-compose-signature-auto-include nil
          mu4e-user-mail-address-list '("jake.faulkner@pg.canterbury.ac.nz")
          user-mail-address "jake.faulkner@pg.canterbury.ac.nz"
          mu4e-sent-messages-behavior 'delete
          mu4e-maildir-shortcuts '(("/inbox" . ?i)
                                   ("/sent" . ?s)
                                   ("/drafts" . ?d)
                                   ("/trash" . ?t)))

    ;; use davmail to retrieve Exchange email
    (setq message-send-mail-function 'message-send-mail-with-sendmail)
    (setq sendmail-program "msmtp"))
#+end_src
* Bibliography 
#+begin_src emacs-lisp
  (elpaca-setup citar
                (:global "C-c b" citar-open)
                (:option
                 citar-bibliography '("~/Sync/bibliography/bibliography.bib"))

                (setq citar-library-paths '("~/Sync/bibliography/pdfs")))

  (elpaca-setup citar-embark
    (:with-feature citar
      (:when-loaded
        (:with-feature embark
          (:when-loaded (citar-embark-mode))))))
#+end_src
* Elfeed
#+begin_src emacs-lisp
  (elpaca-setup elfeed
                (:option
                 elfeed-feeds '(("ttrss+https://jake@jakefaulkner.me/tt-rss" :use-authinfo t))))

  (elpaca-setup elfeed-protocol
                (:load-after elfeed)
                (:option elfeed-protocol-enabled-protocols '(ttrss))
                (:when-loaded
                  (elfeed-protocol-enable)))
#+end_src
* Helpful
#+begin_src emacs-lisp
  (elpaca-setup helpful
                (:global
                 "C-h f" helpful-callable
                 "C-h o" helpful-symbol
                 "C-h v" helpful-variable
                 "C-h k" helpful-key))
#+end_src
* Ox ModernCV
#+begin_src emacs-lisp
  (elpaca-setup (ox-moderncv :repo "https://gitlab.com/lafrenierejm/org-cv.git") 
                (:load-after org))
#+end_src
* Doc View
#+begin_src emacs-lisp
  (setup doc-view
    (:option doc-view-resolution 300)
    (defun my/rectangle-number-lines ()
      (interactive)
      (rectangle-number-lines (region-beginning) (region-end) 1 "%d. "))
    (transient-define-prefix doc-view-transient ()
      "Transient for doc-view mode."

      [:class transient-columns
              ["Zoom"
               ("+" "Enlarge" doc-view-enlarge :transient t)
               ("-" "Shrink" doc-view-shrink :transient t)
               ("w" "Fit window to page" doc-view-fit-window-to-page :transient t)
               ("W" "Fit width to window" doc-view-fit-width-to-window :transient t)]
              ["Navigation"
               ("g" "Go to page" doc-view-goto-page)
               (">" "Last page" doc-view-last-page)
               ("<" "First page" doc-view-first-page)]
              ["Scale"
               ("R" "Scale reset" doc-view-scale-reset)
               ("a" "Scale adjust" doc-view-scale-adjust)]
              ["Miscellaneous"
               ("o" "Open text" doc-view-open-text)
               ("s" "Set slice" doc-view-set-slice)
               ("x" "Kill proc" doc-view-kill-proc)
               ("c" "Clear cache" doc-view-clear-cache)
               ("d" "Dired cache" doc-view-dired-cache)
               ("r" "Reset slice" doc-view-reset-slice)
               ("p" "Presentation" doc-view-presentation)]])

    (:bind "<tab>" 'doc-view-transient)
    (:hook disable-line-numbers))
#+end_src
* Eshell
#+begin_src emacs-lisp
  (setup esh-module
    (:option
     eshell-prefer-lisp-functions t
     eshell-prefer-lisp-variables t)
    (:when-loaded
      (:option
       (prepend eshell-modules-list) 'eshell-tramp)))
#+end_src
